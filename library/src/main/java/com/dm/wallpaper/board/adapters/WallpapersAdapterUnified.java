package com.dm.wallpaper.board.adapters;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.support.annotation.ColorInt;
import android.support.annotation.NonNull;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.graphics.Palette;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.TextView;

import com.danimahardhika.cafebar.CafeBar;
import com.danimahardhika.cafebar.CafeBarTheme;
import com.dm.wallpaper.board.R;
import com.dm.wallpaper.board.R2;
import com.dm.wallpaper.board.activities.WallpaperBoardPreviewActivity;
import com.dm.wallpaper.board.databases.Database;
import com.dm.wallpaper.board.fragments.FavoritesFragment;
import com.dm.wallpaper.board.fragments.WallpaperSearchFragment;
import com.dm.wallpaper.board.fragments.WallpapersFragment;
import com.dm.wallpaper.board.fragments.dialogs.WallpaperOptionsFragment;
import com.dm.wallpaper.board.helpers.ColorHelper;
import com.dm.wallpaper.board.helpers.DrawableHelper;
import com.dm.wallpaper.board.helpers.WallpaperHelper;
import com.dm.wallpaper.board.items.Category;
import com.dm.wallpaper.board.items.Wallpaper;
import com.dm.wallpaper.board.utils.Extras;
import com.dm.wallpaper.board.utils.ImageConfig;
import com.dm.wallpaper.board.utils.listeners.WallpaperListener;
import com.dm.wallpaper.board.utils.views.HeaderView;
import com.kogitune.activitytransition.ActivityTransitionLauncher;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.display.FadeInBitmapDisplayer;
import com.nostra13.universalimageloader.core.imageaware.ImageViewAware;
import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;

import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;

/*
 * Wallpaper Board
 *
 * Copyright (c) 2017 Dani Mahardhika
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

public class WallpapersAdapterUnified extends RecyclerView.Adapter<RecyclerView.ViewHolder> {

    private final Context mContext;
    private final DisplayImageOptions.Builder mOptions;
    private List<Object> mWallpapers;

    private int mLastSelectedPosition = -1;
    private final boolean mIsAutoGeneratedColor;
    private final boolean mIsFavoriteMode;
    public static boolean sIsClickable = true;

    public static final int TYPE_IMAGE = 0;
    public static final int TYPE_HEADER = 1;

    public WallpapersAdapterUnified(@NonNull Context context, @NonNull List<Object> wallpapers,
                                    boolean isFavoriteMode) {
        mContext = context;
        mWallpapers = wallpapers;
        mIsFavoriteMode = isFavoriteMode;
        mIsAutoGeneratedColor = mContext.getResources().getBoolean(
                R.bool.card_wallpaper_auto_generated_color);

        int color = ColorHelper.getAttributeColor(mContext, android.R.attr.textColorSecondary);
        Drawable loading = DrawableHelper.getDefaultImage(
                mContext, R.drawable.ic_default_image_loading, color,
                mContext.getResources().getDimensionPixelSize(R.dimen.default_image_padding));
        Drawable failed = DrawableHelper.getDefaultImage(
                mContext, R.drawable.ic_default_image_failed, color,
                mContext.getResources().getDimensionPixelSize(R.dimen.default_image_padding));
        mOptions = ImageConfig.getRawDefaultImageOptions();
        mOptions.resetViewBeforeLoading(true);
        mOptions.cacheInMemory(true);
        mOptions.cacheOnDisk(true);
        mOptions.showImageForEmptyUri(failed);
        mOptions.showImageOnFail(failed);
        mOptions.showImageOnLoading(loading);
        mOptions.displayer(new FadeInBitmapDisplayer(700));
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        if (viewType == TYPE_IMAGE) {
            View view = LayoutInflater.from(mContext).inflate(
                    R.layout.fragment_wallpapers_item_grid, parent, false);
            return new ImageHolder(view);
        }
        if (viewType == TYPE_HEADER) {
            View view = LayoutInflater.from(mContext).inflate(
                    R.layout.fragment_wallpapers_category, parent, false);
            return new HeaderHolder(view);
        }
        return null;
    }

    @Override
    public int getItemViewType(int position) {
        Object o = mWallpapers.get(position);
        if (o instanceof Category) {
            return TYPE_HEADER;
        }
        return TYPE_IMAGE;
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder h, int position) {
        if (h instanceof  ImageHolder) {
            ImageHolder holder = (ImageHolder) h;
            holder.name.setText(((Wallpaper)mWallpapers.get(position)).getName());
            holder.author.setText(((Wallpaper)mWallpapers.get(position)).getAuthor());

            setFavorite(holder.favorite, ColorHelper.getAttributeColor(
                    mContext, android.R.attr.textColorPrimary), position, false);

            String url = WallpaperHelper.getThumbnailUrl(mContext,
                    ((Wallpaper)mWallpapers.get(position)).getUrl(),
                    ((Wallpaper)mWallpapers.get(position)).getThumbUrl());

            ImageLoader.getInstance().displayImage(url, new ImageViewAware(holder.image),
                    mOptions.build(), ImageConfig.getThumbnailSize(mContext), new SimpleImageLoadingListener() {
                        @Override
                        public void onLoadingStarted(String imageUri, View view) {
                            super.onLoadingStarted(imageUri, view);
                            if (mIsAutoGeneratedColor) {
                                int vibrant = ColorHelper.getAttributeColor(
                                        mContext, R.attr.card_background);
                                holder.imageInfo.setBackgroundColor(vibrant);
                                int primary = ColorHelper.getAttributeColor(
                                        mContext, android.R.attr.textColorPrimary);
                                holder.name.setTextColor(primary);
                                holder.author.setTextColor(primary);
                            } else {
                                int color = Color.WHITE;
                                holder.imageInfo.setBackgroundColor(mContext.getResources().getColor(R.color.image_info_bg));
                                holder.name.setTextColor(color);
                                holder.author.setTextColor(color);
                            }
                        }

                        @Override
                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                            super.onLoadingComplete(imageUri, view, loadedImage);
                            if (mIsAutoGeneratedColor) {
                                if (loadedImage != null) {
                                    Palette.from(loadedImage).generate(palette -> {
                                        int vibrant = ColorHelper.getAttributeColor(
                                                mContext, R.attr.card_background);
                                        int color = palette.getVibrantColor(vibrant);
                                        if (color == vibrant)
                                            color = palette.getMutedColor(vibrant);
                                        color = Color.argb(0x60, Color.red(color), Color.green(color), Color.blue(color));
                                        holder.imageInfo.setBackgroundColor(color);
                                        int text = ColorHelper.getTitleTextColor(color);
                                        holder.name.setTextColor(text);
                                        holder.author.setTextColor(text);
                                        setFavorite(holder.favorite, text, holder.getAdapterPosition(), false);
                                    });
                                }
                            } else {
                                int color = Color.WHITE;
                                holder.imageInfo.setBackgroundColor(mContext.getResources().getColor(R.color.image_info_bg));
                                holder.name.setTextColor(color);
                                holder.author.setTextColor(color);
                                setFavorite(holder.favorite, color, holder.getAdapterPosition(), false);
                            }
                        }
                    }, null);
        } else if (h instanceof HeaderHolder) {
            HeaderHolder holder = (HeaderHolder) h;
            holder.category.setText(((Category)mWallpapers.get(position)).getName());

            String url = ((Category)mWallpapers.get(position)).getThumbUrl();
            ImageLoader.getInstance().displayImage(url, new ImageViewAware(holder.image),
                    mOptions.build(), ImageConfig.getThumbnailSize(mContext), new SimpleImageLoadingListener() {
                        @Override
                        public void onLoadingStarted(String imageUri, View view) {
                            super.onLoadingStarted(imageUri, view);
                        }

                        @Override
                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                            super.onLoadingComplete(imageUri, view, loadedImage);
                        }
                    }, null);
        }
    }

    @Override
    public int getItemCount() {
        return mWallpapers.size();
    }

    public void filter() {
        Database database = new Database(mContext);
        mWallpapers = database.getFilteredWallpapersUnified();
        notifyDataSetChanged();
    }

    class ImageHolder extends RecyclerView.ViewHolder implements View.OnClickListener, View.OnLongClickListener {

        @BindView(R2.id.card)
        CardView card;
        @BindView(R2.id.container)
        FrameLayout container;
        @BindView(R2.id.image)
        HeaderView image;
        @BindView(R2.id.name)
        TextView name;
        @BindView(R2.id.author)
        TextView author;
        @BindView(R2.id.favorite)
        ImageView favorite;
        @BindView(R2.id.image_info)
        View imageInfo;

        ImageHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
            container.setOnClickListener(this);
            //container.setOnLongClickListener(this);
            favorite.setOnClickListener(this);
        }

        @Override
        public void onClick(View view) {
            int id = view.getId();
            int position = getAdapterPosition();
            if (id == R.id.container) {
                if (sIsClickable) {
                    sIsClickable = false;
                    try {
                        final Intent intent = new Intent(mContext, WallpaperBoardPreviewActivity.class);
                        intent.putExtra(Extras.EXTRA_URL, ((Wallpaper)mWallpapers.get(position)).getUrl());
                        intent.putExtra(Extras.EXTRA_AUTHOR, ((Wallpaper)mWallpapers.get(position)).getAuthor());
                        intent.putExtra(Extras.EXTRA_NAME, ((Wallpaper)mWallpapers.get(position)).getName());

                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)
                                .from(image, Extras.EXTRA_IMAGE)
                                .image(((BitmapDrawable) image.getDrawable()).getBitmap())
                                .launch(intent);
                    } catch (Exception e) {
                        sIsClickable = true;
                    }

                    WallpaperListener listener = getWallpaperListener();
                    if (listener != null) {
                        listener.onWallpaperSelected(position);
                    }
                }
            } else if (id == R.id.favorite) {
                if (position < 0 || position > mWallpapers.size()) return;

                if (mIsFavoriteMode) {
                    Database database = new Database(mContext);
                    database.favoriteWallpaper(((Wallpaper)mWallpapers.get(position)).getId(),
                            !((Wallpaper)mWallpapers.get(position)).isFavorite());
                    mWallpapers.remove(position);
                    notifyItemRemoved(position);
                    return;
                }

                ((Wallpaper)mWallpapers.get(position)).setFavorite(!((Wallpaper)mWallpapers.get(position)).isFavorite());
                setFavorite(favorite, name.getCurrentTextColor(), position, true);

                CafeBar.builder(mContext)
                        .theme(new CafeBarTheme.Custom(ColorHelper.getAttributeColor(
                                mContext, R.attr.card_background)))
                        .fitSystemWindow(R.bool.view_fitsystemwindow)
                        .content(String.format(
                                mContext.getResources().getString(((Wallpaper)mWallpapers.get(position)).isFavorite() ?
                                        R.string.wallpaper_favorite_added : R.string.wallpaper_favorite_removed),
                                ((Wallpaper)mWallpapers.get(position)).getName()))
                        .icon(((Wallpaper)mWallpapers.get(position)).isFavorite() ?
                                R.drawable.ic_toolbar_love : R.drawable.ic_toolbar_unlove)
                        .build().show();
            }
        }

        @Override
        public boolean onLongClick(View view) {
            int id = view.getId();
            int position = getAdapterPosition();
            if (id == R.id.container) {
                WallpaperListener listener = getWallpaperListener();
                if (listener != null) {
                    if (!listener.isSelectEnabled()) {
                        return false;
                    }
                }
                if (position < 0 || position > mWallpapers.size()) {
                    mLastSelectedPosition = -1;
                    return false;
                }

                mLastSelectedPosition = position;
                WallpaperOptionsFragment.showWallpaperOptionsDialog(
                        ((AppCompatActivity) mContext).getSupportFragmentManager(),
                        ((Wallpaper)mWallpapers.get(position)).getUrl(),
                        ((Wallpaper)mWallpapers.get(position)).getName());
                return true;
            }
            return false;
        }
    }

    class HeaderHolder extends RecyclerView.ViewHolder {

        @BindView(R2.id.card)
        CardView card;
        @BindView(R2.id.container)
        FrameLayout container;
        @BindView(R2.id.category)
        TextView category;
        @BindView(R2.id.category_image)
        ImageView image;

        HeaderHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
        }
    }

    private void setFavorite(@NonNull ImageView imageView, @ColorInt int color, int position, boolean write) {
        if (position < 0 || position > mWallpapers.size()) return;

        if (mIsFavoriteMode) {
            if (!mContext.getResources().getBoolean(R.bool.card_wallpaper_auto_generated_color))
                color = ContextCompat.getColor(mContext, R.color.favoriteColor);
            imageView.setImageDrawable(DrawableHelper.getTintedDrawable(mContext, R.drawable.ic_toolbar_love, color));
            return;
        }

        boolean isFavorite = ((Wallpaper)mWallpapers.get(position)).isFavorite();
        if (!mContext.getResources().getBoolean(R.bool.card_wallpaper_auto_generated_color) && isFavorite)
            color = ContextCompat.getColor(mContext, R.color.favoriteColor);
        imageView.setImageDrawable(DrawableHelper.getTintedDrawable(mContext,
                isFavorite ? R.drawable.ic_toolbar_love : R.drawable.ic_toolbar_unlove, color));
        if (write) {
            Database database = new Database(mContext);
            database.favoriteWallpaper(((Wallpaper)mWallpapers.get(position)).getId(), isFavorite);
        }
    }

    private WallpaperListener getWallpaperListener() {
        FragmentManager fm = ((AppCompatActivity) mContext).getSupportFragmentManager();
        if (fm != null) {
            Fragment fragment = fm.findFragmentById(R.id.container);
            if (fragment != null) {
                if (fragment instanceof WallpapersFragment ||
                        fragment instanceof FavoritesFragment ||
                        fragment instanceof WallpaperSearchFragment) {
                    return (WallpaperListener) fragment;
                }
            }
        }
        return null;
    }
}
